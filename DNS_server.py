from socket import * #sockets
import sys 
import argparse

"""
@author Shyam Sudhakaran

A simple DNSserver
architecture modelled after the one found here: http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm
followed a tutorial by howcode : https://www.youtube.com/watch?v=HdrPWGZ3NRo&index=1&list=PLBOh8f9FoHHhvO5e5HF_6mYvtZegobYX2
Program doesn't work just yet but at least it runs and can be detected by dig. Gets a mismatch id
"""

class DNSserver():

	def __init__(self):
		self.port = 53 #port 53 for UDP DNS
		self.ip = '127.0.0.1'
		self.s = 0

	def setup(self):
		self.s = socket(AF_INET, SOCK_DGRAM) #initialize socket
		self.s.bind((self.ip,self.port))

	def get_tid(self,data):
		'''
		A 16-bit identification field generated by the device that creates the DNS query.
		It is copied by the server into the response, so it can be used by that device to match that query to the corresponding reply received from a DNS server. 
		Gets the first two bytes of the dns query, which is the transaction id.
		'''
		transaction = data
		tid = ''
		for byte in transaction:
			tid += hex(byte)[2:] #get rid of 0x
		return tid.encode('utf-8')

	def get_flags(self,data):		
		"""
		Differentiates between queries and responses. We will use 0 for a standard query
		"""
		b1 = data[0]
		b2 = data[1:2]

		qr = '1'
		opcode = ''

		i = 1
		while i < 5:
			opcode += str((b1&(1<<i))) #left shift
			i+=1
		aa = '1'
		tc = '0'
		rd = '0'
		ra = '0'
		z = '000'
		Rcode = '0000'

		out = int(qr + opcode + aa + tc + rd,2).to_bytes(1,byteorder='big') + int(ra + z + Rcode,2).to_bytes(1,byteorder='big')
		return out


	def build(self, data):
		packet = self.get_tid(data[:2])
		print(packet)
		flags = self.get_flags(data[2:4])
		print(flags)

		question = b'\x00\x01' 
		domainnameq = data[12:] + b'\xc0\x0c'  
		packet += flags
		packet += question
		packet += domainnameq
		packet+=b'\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'             # Response type, ttl and resource data length -> 4 bytes
		packet+=str.join('',map(lambda x: chr(int(x)), '127.0.0.1'.split('.'))).encode('utf-8') # 4bytes of IP
		return packet

	def listen(self):
		'''
		Listens for UDP messages
		'''
		while True:
			data, ipaddr = self.s.recvfrom(1024)
			# data = data.decode('utf-8')
			pack = self.build(data)
			#print(r)	
			self.s.sendto(pack,ipaddr)

#sets up the server
dns = DNSserver()
dns.setup()
dns.listen()